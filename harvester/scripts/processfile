#!/usr/bin/env python
# -*- coding: utf-8 -*-
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2013 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import sys
import logging
import json
import argparse
from configobj import ConfigObj
from contextlib import closing, contextmanager
from functools import partial
from operator import itemgetter
import re

from minerva.util import compose, expand_args, unlines, k, \
    make_tuple
from minerva.util.config import get_defaults
from minerva.util.tabulate import render_table
from minerva.instance import MinervaInstance
from minerva.directory.helpers_v4 import name_to_datasource
from minerva.storage import get_plugin

from minerva_harvesting.fileprocessor import process_file
from minerva_harvesting.plugins import iter_entry_points, \
    get_plugin as get_harvest_plugin


package_name = "minerva_harvesting"
script_name = os.path.basename(__file__)
config_file = "{}.conf".format(script_name)
configfile_path = os.path.join("/etc/minerva/", config_file)


def main():
    args = create_argparser().parse_args()

    if args.debug:
        logging.root.setLevel(logging.DEBUG)

    if args.verbose:
        logging.root.addHandler(logging.StreamHandler())

    handle_package = partial(filter_package, args.dn_filter,
                             args.trend_filter)
    handle_package = compose(handle_package, make_tuple)

    if args.debug:
        handle_package = compose(show_package, handle_package)

    statistics = Statistics()

    if args.statistics:
        handle_package = compose(statistics.extract_statistics,
                                 handle_package)

    if args.store:
        user = (
            args.user
            or args.config.get("database", {}).get("user")
            or "minerva_admin"
        )

        storage_provider = partial(store_database, args.minerva_instance, user,
                                   args.plugin.storagetype(),
                                   args.datasource)
    else:
        storage_provider = store_dummy

    with storage_provider() as store_raw:
        handle_package = compose(expand_args(store_raw), handle_package)

        for file_path in args.file_path:
            if args.verbose:
                logging.info("Processing {0}".format(file_path))

            logging.info(
                "Start processing file {0} using plugin {1}"
                " and config {2}".format(
                    file_path, args.plugin, args.parser_config))

            process_file(file_path, args.plugin, args.parser_config,
                         handle_package, args.show_progress)

    if args.statistics:
        for line in statistics.report():
            logging.info(line)


def create_argparser():
    parser = argparse.ArgumentParser(description="Script for processing files")

    parser.add_argument(
        "file_path", nargs="*",
        help="path of file that will be processed")

    parser.add_argument(
        "-i", "--instance", action=_LoadMinervaInstance,
        dest="minerva_instance", help="name of the minerva instance")

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument(
        "-p", "--plugin", action=_LoadHarvestPlugin,
        help="harvester plug-in to use for processing file(s)")

    parser.add_argument(
        "-l", "--list-plugins", action=_ListPlugins,
        help="list installed Harvester plug-ins")

    parser.add_argument(
        "-c", "--configfile", action=_LoadConfig,
        default=load_default_config(),
        dest="config", help="path to config file")

    parser.add_argument(
        "--parser-config", default="{}", type=json.loads,
        help="parser specific configuration")

    parser.add_argument(
        "--store", action="store_true", default=False,
        help="write data to database")

    parser.add_argument(
        "--show-progress", action="store_true",
        dest="show_progress", default=False, help="show progressbar")

    parser.add_argument(
        "-v", "--verbose", action="store_true", dest="verbose",
        default=False, help="produce verbose output")

    parser.add_argument(
        "--debug", action="store_true", dest="debug",
        default=False, help="produce debug output")

    parser.add_argument("--dn-filter", type=create_dn_filter,
                        default=k(True), help="filter by distinguished name")

    parser.add_argument("--trend-filter", type=create_trend_filter,
                        default=k(True), help="filter by trend name")

    parser.add_argument(
        "--generate-configfile", action=GenerateConfigFileAction,
        help="generate default config file")

    parser.add_argument(
        "--datasource", dest="datasource", default="processfile",
        help="datasource to use")

    parser.add_argument(
        "--statistics", action="store_true", dest="statistics", default=False,
        help="show statistics like number of packages, entities, etc.")

    return parser


def create_dn_filter(x):
    if x:
        return re.compile(x).match
    else:
        return k(True)


def create_trend_filter(x):
    if x:
        return re.compile(x).match
    else:
        return k(True)


class Statistics(object):
    def __init__(self):
        self.package_count = 0

    def extract_statistics(self, package):
        self.package_count += 1

        return package

    def report(self):
        return [
            "{} packages".format(self.package_count)
        ]


def filter_package(entity_filter, trend_filter, package):
    trend_names, rows = package[-2:]

    filtered_trend_names = filter(trend_filter, trend_names)

    if len(filtered_trend_names) > 0:
        trend_filter_map = map(trend_filter, trend_names)

        filter_rows = compose(entity_filter, itemgetter(0))

        entity_filtered_rows = filter(filter_rows, rows)

        filtered_rows = []

        for dn, values in entity_filtered_rows:
            trend_filtered_values = [v
                                     for include, v in
                                     zip(trend_filter_map, values)
                                     if include]

            trend_filtered_row = dn, trend_filtered_values

            filtered_rows.append(trend_filtered_row)
    else:
        filtered_rows = []

    return package[:-2] + (filtered_trend_names, filtered_rows)


def show_package(package):
    trend_names, rows = package[-2:]

    if rows:
        render_as_table(trend_names, rows)

    return package


def render_as_table(trend_names, rows):
    column_names = ["dn"] + list(trend_names)
    column_align = ">" * len(column_names)
    column_sizes = ["max"] * len(column_names)

    rows = [[dn] + values for dn, values in rows]

    table = render_table(column_names, column_align, column_sizes, rows)

    print(unlines(table))


def load_default_config():
    return ConfigObj(get_defaults(package_name, config_file))


class GenerateConfigFileAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        sys.stdout.write(get_defaults(package_name, config_file))
        sys.exit(0)


class _ListPlugins(argparse.Action):
    def __init__(self, option_strings, dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS, help=None):
        super(_ListPlugins, self).__init__(option_strings=option_strings,
                                           dest=dest, default=default, nargs=0,
                                           help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        for entrypoint in iter_entry_points():
            print(entrypoint.name)

        sys.exit(0)


class _LoadConfig(argparse.Action):
    def __init__(self, option_strings, dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS, help=None,
                 defaults_loader=load_default_config):
        super(_LoadConfig, self).__init__(option_strings=option_strings,
                                          dest=dest, default=default, nargs=1,
                                          help=help)

        self.load_default_config = load_default_config

    def __call__(self, parser, namespace, values, option_string=None):
        file_path = values[0]

        if not os.path.isfile(file_path):
            print("Config file {0} could not be found.".format(
                file_path))
            sys.exit(1)

        setattr(namespace, self.dest, ConfigObj(file_path))


class _LoadHarvestPlugin(argparse.Action):
    def __init__(self, option_strings, dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS, help=None):
        super(_LoadHarvestPlugin, self).__init__(
            option_strings=option_strings, dest=dest, default=default,
            nargs=1, help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        plugin_name = values[0]

        plugin = get_harvest_plugin(plugin_name)

        if plugin is None:
            print("Data type '{0}' not supported".format(plugin_name))
            sys.exit(1)

        setattr(namespace, self.dest, plugin)


class _LoadMinervaInstance(argparse.Action):
    def __init__(self, option_strings, dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS, help=None):
        super(_LoadMinervaInstance, self).__init__(
            option_strings=option_strings, dest=dest, default=default,
            nargs=1, help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        default_instance_name = os.environ.get("DEFAULT_MINERVA_INSTANCE")

        instance_name = values[0] or default_instance_name or self.default

        minerva_instance = MinervaInstance.load(instance_name)

        setattr(namespace, self.dest, minerva_instance)


@contextmanager
def store_database(minerva_instance, user, storage_type, datasource_name):
    with closing(minerva_instance.connect(user=user)) as conn:
        with closing(conn.cursor()) as cursor:
            datasource = name_to_datasource(cursor, datasource_name)

        conn.commit()

        storage = get_plugin(storage_type)(conn, api_version=4)

        yield compose(partial(storage.store_raw, datasource),
                      storage.RawDataPackage)


@contextmanager
def store_dummy():
    yield no_op


def no_op(*args, **kwargs):
    pass


if __name__ == "__main__":
    main()
