#!/usr/bin/env python
# -*- coding: utf-8 -*-
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2013 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import sys
import logging
import json
from logging.handlers import RotatingFileHandler
import argparse
from configobj import ConfigObj
import pkg_resources
from contextlib import closing
from functools import partial
from operator import itemgetter, eq
import re

from minerva.util import parse_size, compose, expand_args, unlines, k, make_tuple, no_op
from minerva.util.config import load_config, get_defaults, ConfigError
from minerva.util.tabulate import render_table
from minerva.db import connect
from minerva.db.postgresql import prepare_statements
from minerva.directory.helpers import get_datasource
from minerva.storage import get_plugin

from minerva.harvester.fileprocessor import process_file, ParseError
from minerva.harvester.plugins import ENTRYPOINT


package_name = "minerva.harvester"
script_name = os.path.basename(__file__)


level_map = {
	"DEBUG": logging.DEBUG,
	"INFO": logging.INFO,
	"WARNING": logging.WARNING,
	"ERROR": logging.ERROR,
	"CRITICAL": logging.CRITICAL}


def main():
	parser = argparse.ArgumentParser(description="Script for sanity-checking files")

	parser.add_argument("file_path", nargs="*",
		help="path of file that will be processed")

	parser.add_argument("-p", "--plugin",
		help="Harvester plug-in to use for processing file(s)")

	parser.add_argument("-l", "--list-plugins", action="store_true",
		dest="list_plugins", help="List installed Harvester plug-ins")

	parser.add_argument("--parser-config", default="{}", dest="parserconfig",
		help="parser specific configuration")

	parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
		default=False, help="produce verbose output")

	parser.add_argument("-q", "--quiet", action="store_true", dest="quiet",
		default=False, help="only show execution-blocking errors")

	parser.add_argument("--debug", action="store_true", dest="debug",
		default=False, help="produce debug output")

	args = parser.parse_args()

	if args.list_plugins:
		for entrypoint in pkg_resources.iter_entry_points(group=ENTRYPOINT):
			print(entrypoint.name)

		return 0

	#log_level = level_map[config["log_level"]]

	#if args.debug:
	#	log_level = logging.debug

	#setup_logging(config["log_directory"], config["log_filename"],
	#	config["log_rotation_size"], log_level)

	if not args.plugin:
		print("Harvester plug-in {0} could not be found.".format(args.plugin))
		return 1

	handle_package = k(True)

	if not args.quiet:
		info = partial(write_and_flush, sys.stdout)
	else:
		info = no_op

	for file_path in args.file_path:
		if args.verbose:
			print("Processing {0}".format(file_path))

		info("{} -- ".format(file_path))

		try:
			process_file(file_path, args.plugin, args.parserconfig,
					compose(handle_package, make_tuple), False)
		except ParseError as exc:
			info("{1!s}\n".format(exc))
		else:
			info("OK\n")

	return 0


def write_and_flush(stream, txt):
	stream.write(txt)
	stream.flush()


def setup_logging(directory, filename, rotation_size, level):
	max_log_size = parse_size(rotation_size)

	filepath = os.path.join(directory, filename)
	handler = RotatingFileHandler(filepath, maxBytes=max_log_size, backupCount=5)
	handler.setLevel(level)

	formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
	handler.setFormatter(formatter)

	rootlogger = logging.getLogger("")
	rootlogger.setLevel(level)
	rootlogger.addHandler(handler)


if __name__ == "__main__":
	sys.exit(main())
