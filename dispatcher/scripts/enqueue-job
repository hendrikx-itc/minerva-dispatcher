#!/usr/bin/env python
# -*- coding: utf-8 -*-
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008, 2011 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import argparse
from contextlib import closing

from configobj import ConfigObj

from minerva.db import connect, extract_safe_url, OperationalError
from minerva.system.jobqueue import enqueue_job
from minerva.system.helpers import PREPARED_STATEMENTS


def main():
    parser = argparse.ArgumentParser(description='Place a file in the job queue')

    parser.add_argument("-c", "--configfile", dest="configfile",
        help="the path to the config file", default="/etc/minerva/enqueue_job.conf")
    parser.add_argument("-d", "--datasource", dest="datasource",
        help="datasource of file", default="enqueue_job")
    parser.add_argument('file', metavar='FILE', type=str, nargs='+',
        help='file to enqueue')

    args = parser.parse_args()

    config = ConfigObj(args.configfile)

    with closing(connect(config["db_url"])) as conn:
        with closing(conn.cursor()) as cursor:
            for stmt in PREPARED_STATEMENTS:
                cursor.execute("PREPARE {}".format(stmt))

            query = "SELECT id FROM system.datasource WHERE name = %s"
            query_args = (args.datasource, )
            cursor.execute(query, query_args)

            if cursor.rowcount == 0:
                print("No such datasource '{}'".format(args.datasource))
                return 1

            datasource_id, = cursor.fetchone()

            cursor.execute("SELECT id FROM system.process WHERE type = %s", ("enqueue_job", ))

            process_id, = cursor.fetchone()

        for path in args.file:
            filesize = os.path.getsize(path)

            enqueue_job(conn, datasource_id, process_id, path, filesize);


if __name__ == "__main__":
    main()