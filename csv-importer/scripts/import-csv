#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Command line tool for importing CSV files as trend, attribute or notification
data.
"""
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2013 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import logging.handlers
import os
import sys
import argparse
from contextlib import closing
from io import StringIO
from copy import deepcopy

import yaml
from pkg_resources import resource_string

from minerva.instance import MinervaInstance

from minerva_csvimporter.importer import import_csv, ConfigurationError
from minerva_csvimporter.profile import Profile, GRANULARITIES


def main():
    parser = create_argument_parser()

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(args.instance)

    if not args.quiet:
        logging.root.addHandler(logging.StreamHandler())
        logging.root.setLevel(args.log_level)

    profile_conf = get_profile(args.profile_directory, args.profile)

    profile_conf = update_profile_from_args(profile_conf, args)

    profile = Profile(profile_conf)

    if args.infile.name:
        _, file_name = os.path.split(args.infile.name)
    else:
        file_name = None

    with closing(minerva_instance.connect(user=args.user)) as conn:
        if args.infile is sys.stdin:
            logging.info("start processing from stdin")
        else:
            logging.info("start processing file {0}".format(args.infile.name))

        logging.debug("using identifier {0}".format(profile.identifier))

        profile.timestamp.set_filename(file_name)

        data = args.infile.read()

        infile = StringIO(data)

        import_csv(conn, profile, infile)

        if args.infile is sys.stdin:
            logging.info("finished processing from stdin")
        else:
            logging.info(
                "finished processing file {0}".format(args.infile.name)
            )

    return 0


def create_argument_parser():
    """
    Return fully configured ArgumentParser
    :rtype : ArgumentParser
    """
    default_minerva_instance = os.environ.get(
        "DEFAULT_MINERVA_INSTANCE", "default"
    )

    parser = argparse.ArgumentParser(
        description="Script for importing csv files"
    )

    parser.add_argument(
        "-i", "--instance", default=default_minerva_instance,
        help="name of the target minerva instance"
    )

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument("--data-source", help="name of data source")

    parser.add_argument(
        "infile", nargs='?', type=argparse.FileType('rt'),
        help="Path of file that will be processed", default=sys.stdin
    )

    parser.add_argument(
        "--storage-type", help="storage type/format to use"
    )

    parser.add_argument(
        "--generate-configfile", action=GenerateConfigFileAction, nargs=0,
        help="generate default config file"
    )

    parser.add_argument(
        "-c", "--configfile", default="/etc/minerva/import-csv.conf",
        help="Path to config file"
    )

    parser.add_argument(
        "--generate-profile-file", action=GenerateProfileFileAction, nargs=0,
        help="generate default profile file"
    )

    parser.add_argument(
        "--profile-directory", default="/etc/minerva/csv-importer/profiles",
        help="location of profiles"
    )

    parser.add_argument(
        "-p", "--profile", default="default", help="Name of profile"
    )

    parser.add_argument(
        "-v", "--verbose", action="store_const", dest="log_level",
        const=logging.INFO, default=logging.ERROR,
        help="Produce verbose output"
    )

    parser.add_argument(
        "--debug", action="store_const", dest="log_level",
        const=logging.DEBUG, default=logging.ERROR,
        help="Produce debug output"
    )

    parser.add_argument(
        "-q", "--quiet", action="store_true", dest="quiet", default=False,
        help="produce output to log file"
    )

    parser.add_argument(
        "-g", "--granularity", dest="granularity",
        help="granularity of csv data", choices=GRANULARITIES.keys()
    )

    parser.add_argument("--timezone", help="timezone of data timestamp")

    parser.add_argument("--identifier", help="the identifier column")

    parser.add_argument(
        "--timestamp", help="default timestamp [YYYYmmdd_HHMM | NOW]"
    )

    parser.add_argument(
        "--timestamp-from-filename-regex",
        help="regular expression for timestamp extraction from filename"
    )

    parser.add_argument(
        "--timestamp-format", help="format of date: default: %%Y%%m%%d_%%H%%M"
    )

    parser.add_argument(
        "--timestamp-column", help="column containing timestamps"
    )

    parser.add_argument(
        "--identifier-regex",
        help="Regex for tweaking identifier in identifier field."
    )

    parser.add_argument(
        "--identifier-is-alias", action="store_true", default=None,
        help="Indicated whether identifier is alias."
    )

    parser.add_argument(
        "--timestamp-is-start", action="store_true", default=None,
        help="(Timestamp + granularity) will be used as timestamp "
        "in Minerva database."
    )

    parser.add_argument(
        "--fields", dest="fields", nargs="+",
        help="Fields to import. If not specified all fields are imported."
    )

    parser.add_argument(
        "--ignore-fields", dest="ignore_fields", nargs="+",
        help="Fields to ignore. If not specified no fields are ignored."
    )

    parser.add_argument(
        "--character-encoding", dest="character_encoding",
        help="character encoding of the source file"
    )

    parser.add_argument(
        "--dialect", help="CSV dialect", choices=["auto", "prime"]
    )

    parser.add_argument(
        "--value-mapping",
        help="json formatted string for mapping specific values to other "
        "values for specific columns (e.g. {\"ccr\":{\"-1\":\"\"}})"
    )

    return parser


def default_config_str():
    return resource_string(
        "minerva_csvimporter",
        "defaults/import-csv.conf"
    )


def default_profile_str():
    return resource_string(
        "minerva_csvimporter",
        "defaults/profile"
    )


class GenerateConfigFileAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        sys.stdout.write(default_config_str())
        sys.exit(0)


class GenerateProfileFileAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        sys.stdout.write(default_profile_str())
        sys.exit(0)


def update_profile_from_args(profile, args):
    """
    Return copy of profile, updated with command line arguments.
    """
    p_copy = deepcopy(profile)

    if args.identifier:
        p_copy["identifier"]["template"] = args.identifier

    if args.identifier_regex:
        p_copy["identifier"]["regex"] = args.identifier_regex

    if args.character_encoding:
        p_copy["character_encoding"] = args.character_encoding

    if args.data_source:
        p_copy["storage"]["config"]["data_source"] = args.data_source

    if args.storage_type:
        p_copy["storage"]["type"] = args.storage_type

        # Except for the data source, the configuration for different storage
        # types is completely different.
        p_copy["storage"]["config"] = {
            "data_source": p_copy["storage"]["config"]["data_source"]
        }

    if args.timestamp_is_start:
        if p_copy["storage"]["type"] != "trend":
            raise ConfigurationError(
                "Option timestamp-is-start can only be used with storage "
                "type trend"
            )
        else:
            p_copy["storage"]["config"]["timestamp_is_start"] = True

    if args.timestamp_column:
        p_copy["timestamp"]["type"] = "from_column"
        p_copy["timestamp"]["config"]["name"] = args.timestamp_column
    elif args.timestamp:
        if args.timestamp.lower() == "now":
            p_copy["timestamp"]["type"] = "now"
            p_copy["timestamp"]["config"] = {}
        else:
            p_copy["timestamp"]["type"] = "fixed"
            p_copy["timestamp"]["config"] = {
                "timestamp": args.timestamp,
                "format": "%Y%m%d_%H%M"
            }

    if args.timestamp_format:
        p_copy["timestamp"]["config"]["format"] = args.timestamp_format

    return p_copy


def load_profile(profile_directory, name):
    """
    Return dictionary with profile data read from profile named `name`.
    """
    possible_profile_paths = [
        name,
        os.path.join(profile_directory, name)
    ]

    try:
        profile_path = next(
            path for path in possible_profile_paths if os.path.isfile(path)
        )
    except StopIteration:
        raise ConfigurationError("profile '{}' not found".format(name))
    else:
        return yaml.load(open(profile_path))


def get_profile(profile_directory, name):
    """
    Return dictionary with profile data merged with default profile.
    """
    profile = yaml.load(StringIO(default_profile_str().decode('utf-8')))

    try:
        profile.update(
            load_profile(profile_directory, name)
        )
    except ConfigurationError as exc:
        logging.warn("{} - using defaults".format(exc))

    return profile


if __name__ == '__main__':
    sys.exit(main())
