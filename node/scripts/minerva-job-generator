#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Minerva Node job generator command line script
"""
from __future__ import print_function

__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2012 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import sys
import argparse
import logging
import signal
from functools import partial
from time import sleep
import threading
from itertools import cycle
from operator import not_

from configobj import ConfigObj

from minerva.util import compose, each, after, iter_while
from minerva.db import connect, extract_safe_url, OperationalError

from minerva.system import jobqueue

from minerva_node.config import load_config, get_defaults


SIGNAL_MAP = {
    signal.SIGKILL: "SIGKILL",
    signal.SIGTERM: "SIGTERM",
    signal.SIGINT: "SIGINT",
    signal.SIGUSR1: "SIGUSR1"
}


def main():
    """
    Script entry point
    """
    parser = argparse.ArgumentParser()

    parser.add_argument("-c", "--configfile", dest="configfile",
        default="/etc/minerva/job-generator.conf", help="the path to the config file")

    parser.add_argument("--generate-configfile", action=GenerateConfigFileAction,
        nargs=0, help="generate base config file")

    args = parser.parse_args()

    config = load_config(get_defaults("job-generator.conf"), args.configfile)

    process_session_queries = [
            "SET application_name = 'node:process'"]

    stop_event = threading.Event()

    def log_signal(signum, _frame):
        logging.info("received {0!s} signal".format(SIGNAL_MAP.get(signum, signum)))

    stop_generator = after(stop_event.set, log_signal)

    signal.signal(signal.SIGTERM, stop_generator)
    signal.signal(signal.SIGINT, stop_generator)

    setup_logging(config["log_level"])

    try:
        process_conn = connect(config["db_url"], setsession=process_session_queries)
    except OperationalError as exc:
        logging.error(exc)
        return 1

    safe_url = extract_safe_url(config["db_url"])

    logging.info("connected to Minerva database {0}".format(safe_url))

    generator = setup_generator(process_conn, stop_event)

    generator.start()

    logging.info("started")

    while generator.is_alive():
        sleep(1)

    logging.info("stopped")


def setup_logging(level):
    """
    Setup stream logging.
    """
    level_map = {
        "DEBUG": logging.DEBUG,
        "INFO": logging.INFO,
        "WARNING": logging.WARNING,
        "ERROR": logging.ERROR,
        "CRITICAL": logging.CRITICAL}

    handler = logging.StreamHandler()
    handler.setLevel(level_map[level])

    formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
    handler.setFormatter(formatter)

    rootlogger = logging.getLogger("")
    rootlogger.setLevel(level_map[level])
    rootlogger.addHandler(handler)


def setup_generator(conn, stop_event):
    iter_condition = compose(not_, stop_event.is_set)

    job_producer = iter_while(iter_condition, job_creator())

    thread_fn = partial(store_jobs, conn, job_producer)

    return threading.Thread(target=thread_fn, name="Generator")


def store_jobs(conn, jobs):
    store_job = after(conn.commit, partial(jobqueue.enqueue_job, conn))

    each(expand_args(store_job), jobs)


def expand_args(fn):
    def wrapper(args):
        fn(*args)

    return wrapper


def job_creator():
    jobs = [
        ("dummy", "{}", 1, 1),
        ("harvest", '{"datasource": "oss-rc-3g-pm", "uri": "/data/test.xml", "datatype": "pm_3gpp"}', 1, 1)]

    return cycle(jobs).next


class GenerateConfigFileAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        sys.stdout.write(get_defaults("job-generator.conf"))

        sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
