#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Minerva Node command line script
"""
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2015 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import sys
import argparse
import logging
import signal
from functools import partial
from time import sleep
import threading
import json
import traceback
from operator import not_
from contextlib import closing

import psycopg2

from minerva.util import iter_queue, after, each, compose, retry_while
from minerva.system import jobqueue
from minerva.instance import connect

from minerva_node.plugins import load_plugins
from minerva_node.error import NodeError, JobError
from minerva_node import Job, version


SIGNAL_MAP = {
    signal.SIGHUP: "SIGHUP",
    signal.SIGKILL: "SIGKILL",
    signal.SIGTERM: "SIGTERM",
    signal.SIGINT: "SIGINT",
    signal.SIGUSR1: "SIGUSR1"
}

NO_JOB_TIMEOUT = 1


class StartupError(Exception):
    pass


def main():
    """
    Script entry point
    """
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--list-plugins", action=ListPluginsAction,
        nargs=0, help="list installed plugins"
    )

    parser.add_argument(
        "-v", "--version", action="version",
        version="%(prog)s {}".format(version.__version__)
    )

    stop_event = threading.Event()

    stop_node = after(stop_event.set, log_signal)

    signal.signal(signal.SIGTERM, stop_node)
    signal.signal(signal.SIGINT, stop_node)
    signal.signal(signal.SIGHUP, stop_node)

    handler_map = {
        psycopg2.OperationalError: lambda exc: logging.error(
            "could not connect to database({}), waiting".format(exc)
        )
    }

    retry_condition = compose(not_, stop_event.is_set)

    conn = retry_while(
        connect, handler_map, retry_condition
    )

    if conn:
        node = setup_node(stop_event, conn)

        node.start()

        logging.info("started")

        while node.is_alive():
            sleep(1)

    logging.info("stopped")


def log_signal(signum, _frame):
    logging.info(
        "received {0!s} signal".format(SIGNAL_MAP.get(signum, signum))
    )


def setup_node(stop_event, conn):
    plugins = load_plugins()

    for plugin in plugins:
        logging.info("loaded plugin '{}'".format(plugin.name))

    plugin_dict = dict((p.name, p(conn)) for p in plugins)

    job_producer = iter_queue(
        stop_event, partial(get_job, conn),
        jobqueue.NoJobAvailable, NO_JOB_TIMEOUT
    )

    jobs = map(partial(create_job, plugin_dict), job_producer)

    process = partial(process_job, conn)

    consume_jobs = partial(each, process)

    thread_fn = partial(consume_jobs, jobs)

    return threading.Thread(target=thread_fn, name="Node")


def get_job(conn):
    try:
        with closing(conn.cursor()) as cursor:
            job = jobqueue.get_job(cursor)
    except psycopg2.InterfaceError:
        logging.error(traceback.format_exc())
        raise jobqueue.NoJobAvailable()
    except Exception:
        logging.error(traceback.format_exc())
        safe_rollback(conn)
        raise jobqueue.NoJobAvailable()
    else:
        safe_commit(conn)

    if job is None:
        raise jobqueue.NoJobAvailable()

    return job


def safe_rollback(conn):
    try:
        conn.rollback()
    except (psycopg2.InterfaceError, psycopg2.OperationalError) as exc:
        logging.info(str(exc))


def safe_commit(conn):
    try:
        conn.commit()
    except (psycopg2.InterfaceError, psycopg2.OperationalError) as exc:
        logging.info(str(exc))


def exec_commit(conn, cmd):
    try:
        with closing(conn.cursor()) as cursor:
            cmd(cursor)
        conn.commit()
    except Exception as exc:
        logging.error(exc)


def process_job(conn, job):
    try:
        job.execute()
    except JobError as exc:
        safe_rollback(conn)
        logging.error(exc)
        message = str(exc)
        exec_commit(conn, job.fail(message))
    except NodeError as exc:
        safe_rollback(conn)
        logging.error(exc)
        message = str(exc)
        exec_commit(conn, job.fail(message))
    except Exception:
        safe_rollback(conn)
        message = traceback.format_exc()
        logging.error(message)
        exec_commit(conn, job.fail(message))
    else:
        logging.info("finished job {} {}".format(job.id, job))
        exec_commit(conn, job.finish)


def create_job(plugin_dict, job):
    job_id, job_type, job_description, job_size, config = job

    try:
        job_description = json.loads(job_description)
    except ValueError:
        logging.error("invalid job description for job {}".format(job_id))
        return Job(job_type, job_id, job_description)

    try:
        plugin = plugin_dict[job_type]
    except KeyError:
        logging.error("no plugin found for job type '{0}'".format(job_type))
        return Job(job_type, job_id, job_description)
    else:
        return plugin.create_job(job_id, job_description, config)


class ListPluginsAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        plugins = load_plugins(None)

        if len(plugins) == 0:
            print("no plugins installed")
        else:
            for plugin in plugins:
                print("-- {} - {}".format(plugin.name, plugin.description))

        sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
